/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.*;

/**
 *
 * @author Regmi
 */
public class Reports extends javax.swing.JFrame {
    DataBase database = new DataBase();
    ArrayList<Employee> employeeListSick = new ArrayList<>();
    ArrayList<Employee> employeeListDay = new ArrayList<>();
    ArrayList<Employee> employeeListType = new ArrayList<>();
    ArrayList<Employee> employeeListSalary = new ArrayList<>();
    ArrayList<Employee> employeeListDept = new ArrayList<>();
    ArrayList<Department> departmentsList = new ArrayList<>();
    
    int sickreport = 0;
    int dayreport = 0;
    int remote = 0;

    /**
     * Creates new form Reports
     */
    public Reports() {
        try {
            ResultSet myrs = database.getStatement().executeQuery("select * from department");
            Department tableDepartment;
            while (myrs.next()){
                tableDepartment = new Department(myrs.getInt("department_id"), 
                myrs.getString("name"), myrs.getInt("num_employees"));
                departmentsList.add(tableDepartment);
            }
        } catch (Exception e){
            System.out.println("Dept Error");
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Kefa", 2, 14)); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Heiti SC", 1, 13)); // NOI18N
        jLabel1.setText("Department:");

        jComboBox1.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Designation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Department Report", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable2.setFont(new java.awt.Font("Lao MN", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Number", "First Name", "Last Name", "Department", "Employee Type", "Sick Days Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Vacation Days Report", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jLabel2.setText("Employee Type:");

        jComboBox2.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full Time", "Part Time", "Contactor", "Intern" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox2PropertyChange(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Department", "Employee Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Employee Type Report", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Department", "Employee Type", "Salary Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jLabel3.setText("Salary Type:");

        jComboBox3.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Annually", "Hourly", "Other" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Salary Report", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jCheckBox2.setFont(new java.awt.Font("Lao MN", 0, 13)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(153, 153, 153));
        jCheckBox2.setText("Include Remote/On-Call Employees");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Department", "Employee Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCheckBox2))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );

        jTabbedPane1.addTab("Day Report", jPanel5);

        jButton1.setFont(new java.awt.Font("STSong", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("/Users/Regmi/Employee Manager/employeeManager/src/main/resources/exit.png")); // NOI18N
        jButton1.setText("Back");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        Home home = new Home();
        home.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        try {
            Employee tableemployee;
            
            if (jTabbedPane1.getSelectedIndex() == 1 && sickreport == 0) { //sick days
                ResultSet myrs = database.getStatement().executeQuery("select * from employee_detail");
                try {
                    while (myrs.next()){
                        tableemployee = new Employee(myrs.getInt("employee_id"), 
                                myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                        myrs.getInt("sickdays_aval"), myrs.getInt("emp_type"));
                        employeeListSick.add(tableemployee);
                    }
                } catch (Exception e){
                    System.out.println(e);
                }

                DefaultTableModel model = (DefaultTableModel)jTable2.getModel(); //sick days
                model.setRowCount(0);
                Object[] row = new Object[6];
                for (int i = 0; i < employeeListSick.size(); i++) {
                    row[0] = employeeListSick.get(i).getID();
                    row[1] = employeeListSick.get(i).getFirstName();
                    row[2] = employeeListSick.get(i).getLastName();
                    for (int k = 0; k < departmentsList.size(); k++) {
                        if (employeeListSick.get(i).getDepID() == departmentsList.get(k).getID()){
                            row[3] = departmentsList.get(k).getName();
                            break;
                        }
                    }
                    int emp_type = employeeListSick.get(i).getEmp_type();
                    if (emp_type == 0) row[4] = "Full Time"; else if (emp_type == 1) row[4] = "Part Time";
                    else if (emp_type == 2) row[4] = "Contractor"; else if (emp_type == 3) row[4] = "Intern";
                    row[5] = employeeListSick.get(i).getSick_days();
                    model.addRow(row);
                }
                sickreport = 1;
                jTable2.setAutoCreateRowSorter(true);
            } else if (jTabbedPane1.getSelectedIndex() == 4 && dayreport == 0 && remote == 0) { //day rep
                employeeListDay = new ArrayList<>();
                String dayName = getDay();
                ResultSet myrs = database.getStatement().executeQuery("select * from employee_detail "
                        + "WHERE " + dayName + " = 1");
                try {
                    while (myrs.next()){
                        tableemployee = new Employee(myrs.getInt("employee_id"), 
                                myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                        myrs.getInt("emp_type"));
                        employeeListDay.add(tableemployee);
                    }
                } catch (Exception e){
                    System.out.println(e);
                }
                
                populateDayTable();
                
                dayreport = 1;
                jTable5.setAutoCreateRowSorter(true);
                
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void populateDayTable() {
        DefaultTableModel model = (DefaultTableModel)jTable5.getModel(); //sick days
        model.setRowCount(0);
        Object[] row = new Object[5];
        for (int i = 0; i < employeeListDay.size(); i++) {
            row[0] = employeeListDay.get(i).getID();
            row[1] = employeeListDay.get(i).getFirstName();
            row[2] = employeeListDay.get(i).getLastName();
            for (int k = 0; k < departmentsList.size(); k++) {
                if (employeeListDay.get(i).getDepID() == departmentsList.get(k).getID()){
                    row[3] = departmentsList.get(k).getName();
                    break;
                }
            }
            int emp_type = employeeListDay.get(i).getEmp_type();
            if (emp_type == 0) row[4] = "Full Time"; else if (emp_type == 1) row[4] = "Part Time";
            else if (emp_type == 2) row[4] = "Contractor"; else if (emp_type == 3) row[4] = "Intern";
            model.addRow(row);
        }
    }
    
    private String getDay() {
          Calendar calendar = Calendar.getInstance();
        int day = calendar.get(Calendar.DAY_OF_WEEK); 
        String dayName = "";
        switch (day) {
            case Calendar.SUNDAY:
                dayName = "sunday";
                break;
            case Calendar.MONDAY:
                dayName = "monday";
                break;
            case Calendar.TUESDAY:
                dayName = "tuesday";
                break;
            case Calendar.WEDNESDAY:
                dayName = "wednesday";
                break;
            case Calendar.THURSDAY:
                dayName = "thursday";
                break;
            case Calendar.FRIDAY:
                dayName = "friday";
                break;
            case Calendar.SATURDAY:
                dayName = "saturday";
                break;
        }
        return dayName;
    }
    
    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        Employee tableemployee;
        if (remote == 0) {
            employeeListDay = new ArrayList<>();
            String dayName = getDay();
            try {
                ResultSet myrs = database.getStatement().executeQuery("select * from employee_detail "
                        + "WHERE " + dayName + " = 1" + " OR remote = 1");
            
                while (myrs.next()){
                    tableemployee = new Employee(myrs.getInt("employee_id"), 
                            myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                    myrs.getInt("emp_type"));
                    employeeListDay.add(tableemployee);
                }
            } catch (Exception e){
                System.out.println(e);
            }

            populateDayTable();

            dayreport = 1;
            remote = 1;
            jTable5.setAutoCreateRowSorter(true);
        } else {
            try {
                employeeListDay = new ArrayList<>();
                String dayName = getDay();
                ResultSet myrs = database.getStatement().executeQuery("select * from employee_detail "
                        + "WHERE " + dayName + " = 1");
                try {
                    while (myrs.next()){
                        tableemployee = new Employee(myrs.getInt("employee_id"), 
                                myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                        myrs.getInt("emp_type"));
                        employeeListDay.add(tableemployee);
                    }
                } catch (Exception e){
                    System.out.println(e);
                }
                
                populateDayTable();
                
                dayreport = 1;
                remote = 0;
                jTable5.setAutoCreateRowSorter(true);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jComboBox2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox2PropertyChange

    }//GEN-LAST:event_jComboBox2PropertyChange

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        employeeListType = new ArrayList<>();
        Employee tableemployee;
        ResultSet myrs = null;
        try {
            myrs = database.getStatement().executeQuery("select * from employee_detail "
                    + "WHERE " + "emp_type" + " = " + jComboBox2.getSelectedIndex());
         
            while (myrs.next()){
                tableemployee = new Employee(myrs.getInt("employee_id"), 
                        myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                myrs.getInt("emp_type"));
                employeeListType.add(tableemployee);
            }
        } catch (Exception e){
            System.out.println(e);
        }
        populateTypeTable();
        jTable3.setAutoCreateRowSorter(true);
     }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        employeeListSalary = new ArrayList<>();
        Employee tableemployee;
        ResultSet myrs = null;
        try {
            myrs = database.getStatement().executeQuery("select * from employee_detail "
                    + "WHERE " + "pay_type" + " = " + jComboBox3.getSelectedIndex());
         
            while (myrs.next()){
                tableemployee = new Employee(myrs.getInt("employee_id"), 
                        myrs.getString("name"), myrs.getString("last_name"), myrs.getInt("dep_id"),
                myrs.getInt("emp_type"), myrs.getDouble("pay"));
                employeeListSalary.add(tableemployee);
            }
        } catch (Exception e){
            System.out.println(e);
        }
        populateSalaryTable();
        jTable4.setAutoCreateRowSorter(true);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        employeeListDept = new ArrayList<>();
        Employee tableemployee;
        ResultSet myrs = null;
        try {
            int chosendep = jComboBox1.getSelectedIndex();
            Department newChoice = departmentsList.get(chosendep);
            myrs = database.getStatement().executeQuery("select * from employee_detail "
                    + "WHERE " + "dep_id" + " = " + newChoice.getID());
         
            while (myrs.next()){
                tableemployee = new Employee(myrs.getInt("employee_id"), 
                        myrs.getString("name"), myrs.getString("last_name"), myrs.getString("designation"));
                employeeListDept.add(tableemployee);
            }
        } catch (Exception e){
            System.out.println(e);
        }
        populateDeptTable();
        jTable1.setAutoCreateRowSorter(true);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void populateDeptTable() {
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel(); //sick days
        model.setRowCount(0);
        Object[] row = new Object[4];
        for (int i = 0; i < employeeListDept.size(); i++) {
            row[0] = employeeListDept.get(i).getID();
            row[1] = employeeListDept.get(i).getFirstName();
            row[2] = employeeListDept.get(i).getLastName();
            row[3] = employeeListDept.get(i).getDesignation();
            model.addRow(row);
        }
    }
    
    private void populateSalaryTable() {
        DefaultTableModel model = (DefaultTableModel)jTable4.getModel(); //sick days
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < employeeListSalary.size(); i++) {
            row[0] = employeeListSalary.get(i).getID();
            row[1] = employeeListSalary.get(i).getFirstName();
            row[2] = employeeListSalary.get(i).getLastName();
            for (int k = 0; k < departmentsList.size(); k++) {
                if (employeeListSalary.get(i).getDepID() == departmentsList.get(k).getID()){
                    row[3] = departmentsList.get(k).getName();
                    break;
                }
            }
            int emp_type = employeeListSalary.get(i).getEmp_type();
            if (emp_type == 0) row[4] = "Full Time"; else if (emp_type == 1) row[4] = "Part Time";
            else if (emp_type == 2) row[4] = "Contractor"; else if (emp_type == 3) row[4] = "Intern";
            row[5] = employeeListSalary.get(i).getPay_amt();
            model.addRow(row);
        }
    }
    
    
    private void populateTypeTable() {
        DefaultTableModel model = (DefaultTableModel)jTable3.getModel(); //sick days
        model.setRowCount(0);
        Object[] row = new Object[5];
        for (int i = 0; i < employeeListType.size(); i++) {
            row[0] = employeeListType.get(i).getID();
            row[1] = employeeListType.get(i).getFirstName();
            row[2] = employeeListType.get(i).getLastName();
            for (int k = 0; k < departmentsList.size(); k++) {
                if (employeeListType.get(i).getDepID() == departmentsList.get(k).getID()){
                    row[3] = departmentsList.get(k).getName();
                    break;
                }
            }
            int emp_type = employeeListType.get(i).getEmp_type();
            if (emp_type == 0) row[4] = "Full Time"; else if (emp_type == 1) row[4] = "Part Time";
            else if (emp_type == 2) row[4] = "Contractor"; else if (emp_type == 3) row[4] = "Intern";
            model.addRow(row);
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    // End of variables declaration//GEN-END:variables
}
